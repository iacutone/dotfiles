"        _
" __   _(_)_ __ ___  _ __ ___
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
"   \_/ |_|_| |_| |_|_|  \___|
"
" Eric Iacutone's vimrc

set modelines=1
set shell=zsh
syntax enable

" Recursive searching into sub dirs
set path+=**

" Display matching files on tab complete
set wildmenu

" Create ctags
nnoremap <leader>ct :silent !ctags -R --languages=ruby --exclude=.git --exclude=log . $(bundle list --paths)

" Yank to OSX clipboard
set clipboard=unnamed

" highlight current line
set cursorline

set incsearch " search as characters are entered
set hlsearch  " highlight matches

" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>

noremap <leader>s :Ack <C-R><C-W><CR> " map leader for Ack

" Easier window management
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Next buffer
nnoremap <Tab> :bnext<cr>

set foldmethod=marker
set foldlevel=0
" Vundle {{{
set nocompatible " be iMproved, required
filetype off     " required
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'ap/vim-css-color'
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-bundler'
Plugin 'tpope/vim-rake'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-dispatch'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-endwise'
Plugin 'janko-m/vim-test'
Plugin 'majutsushi/tagbar'
Plugin 'airblade/vim-gitgutter'
Plugin 'itchyny/lightline.vim'
Plugin 'Raimondi/delimitMate'
Plugin 'rizzatti/dash.vim'
Plugin 'w0rp/ale'
Plugin 'mileszs/ack.vim'
Plugin 'stefanoverna/vim-i18n'
Plugin 'pbrisbin/vim-mkdir'
Plugin 'altercation/vim-colors-solarized'
Plugin 'easymotion/vim-easymotion'
Plugin 'rhysd/devdocs.vim'
Plugin 'rstacruz/sparkup'
Plugin 'farseer90718/vim-taskwarrior'
Plugin 'tbabej/taskwiki'
Plugin 'vimwiki/vimwiki'
Plugin 'mhinz/vim-startify'
Plugin 'junegunn/fzf.vim'
Plugin 'sheerun/vim-polyglot'
call vundle#end()
filetype plugin indent on
" }}}

set autoindent

" Only do this part when compiled with support for autocommands
if has("autocmd")
  autocmd FileType ruby,haml,eruby,yaml,html,javascript,sass,css,scss,cucumber,coffee,sh setlocal ai sw=2 sts=2 et
  autocmd FileType elm setlocal sw=4 sts=4 ts=4
  autocmd BufWritePre *.rb,*.js :call <SID>StripTrailingWhitespaces()
endif

function! <SID>StripTrailingWhitespaces()
   " Preparation: save last search, and cursor position.
   let _s=@/
   let l = line(".")
   let c = col(".")
   " Do the business:
   %s/\s\+$//e
   " Clean up: restore previous search history, and cursor position
   let @/=_s
   call cursor(l, c)
endfunction

let mapleader = ','
set background=dark
let g:solarized_termcolors=256
colorscheme solarized
set backspace=indent,eol,start
set encoding=utf-8

nmap <silent> <leader>s :TestNearest<CR>
nmap <silent> <leader>t :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>
" let test#strategy = 'vtr'
let test#filename_modifier = ':.'

let g:tagbar_ctags_bin='/usr/local/bin/ctags'
let g:tagbar_width=30
noremap <silent> <Leader>y :TagbarToggle
let b:surround_{char2nr('=')} = "<%= \r %>"
let b:surround_{char2nr('-')} = "<% \r %>"
vmap <Leader>z :call I18nTranslateString()<CR>
vmap <Leader>dt :call I18nDisplayTranslation()<CR>

nmap <silent> <leader>dd <Plug>(devdocs-under-cursor)
nmap <silent> <leader>da <Plug>DashSearch

let g:task_rc_override = 'rc.defaultwidth=0'
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

let test#ruby#rspec#executable = 'spring rspec'

cnoreabbrev Ack Ack!

" Tell ack.vim to use ag (the Silver Searcher) instead
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

nmap ; :Buffers<CR>
nmap <C-p> :Files<CR>
nmap <Leader>r :Tags<CR>
nmap <M-k> :Ack! "\b<cword>\b" <CR>
set rtp+=/usr/local/opt/fzf
command! Q q

" ALE
let g:ale_sign_warning = '▲'
let g:ale_sign_error = '✗'
highlight link ALEWarningSign String
highlight link ALEErrorSign Title

" Lightline {{{
set laststatus=2
set noshowmode
let g:lightline = {
\ 'colorscheme': 'jellybeans',
\ 'active': {
\   'left': [['mode', 'paste'], ['filename', 'modified', 'gitbranch']],
\   'right': [['lineinfo'], ['percent'], ['readonly', 'linter_warnings', 'linter_errors', 'linter_ok']]
\ },
\ 'component_expand': {
\   'linter_warnings': 'LightlineLinterWarnings',
\   'linter_errors': 'LightlineLinterErrors',
\   'linter_ok': 'LightlineLinterOK'
\ },
\ 'component_type': {
\   'readonly': 'error',
\   'linter_warnings': 'warning',
\   'linter_errors': 'error'
\ },
\ 'component_function': {
\   'gitbranch': 'fugitive#head'
\ },
\ }

function! LightlineLinterWarnings() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ◆', all_non_errors)
endfunction

function! LightlineLinterErrors() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ✗', all_errors)
endfunction

function! LightlineLinterOK() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '✓ ' : ''
endfunction

autocmd User ALELint call s:MaybeUpdateLightline()

" Update and show lightline but only if it's visible (e.g., not in Goyo)
function! s:MaybeUpdateLightline()
  if exists('#lightline')
    call lightline#update()
  end
endfunction
" }}}
